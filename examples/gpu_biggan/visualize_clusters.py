from main import Biggan
from configs import config
import argparse
from smyrf.torch.utils import color_clusters
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import matplotlib
# Configure matplotlib with Latex font
matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'

import random
import numpy as np
from categories import indx2category

parser = argparse.ArgumentParser()
parser = argparse.ArgumentParser()
parser.add_argument('--weights_root', default='.')
parser.add_argument('--experiment_name', default='130k')
parser.add_argument('--ema', default=False, action="store_true")
parser.add_argument('--device', default='cuda')
# Good seeds: {200}
parser.add_argument('--seed', type=int)
parser.add_argument('--imagenet_category', default=None)

# Clustering configuration
parser.add_argument('--q_cluster_size', type=int, default=256)
parser.add_argument('--disable_smyrf', action='store_true', default=False)

# plotting args
parser.add_argument('--map_size', type=int, default=64)

if __name__ == '__main__':
    args = parser.parse_args()
    # parameterize config
    config['experiment_name'] = args.experiment_name
    config['ema'] = args.ema
    config['weights_root'] = args.weights_root
    config['smyrf'] = not args.disable_smyrf
    config['n_hashes'] = 1
    config['q_cluster_size'] = args.q_cluster_size
    config['q_attn_size'] = args.q_cluster_size
    config['k_cluster_size'] = args.q_cluster_size // 4
    config['k_attn_size'] = args.q_cluster_size // 4
    config['return_attn_map'] = True

    biggan = Biggan(config)
    biggan.load_pretrained()

    # Random sampling
    category2indx = {val: key for key, val in indx2category.items()}
    if args.imagenet_category is not None:
        category = category2indx[args.imagenet_category]
    else:
        category = None

    generator_inputs = biggan.get_random_inputs(bs=1,
                                                target=category,
                                                seed=args.seed)
    out, (q_pos, k_pos), _ = biggan.sample(generator_inputs, return_attn_map=True)

    q_pos = q_pos.squeeze()
    k_pos = k_pos.squeeze()
    n_clusters = 4096 // args.q_cluster_size
    print(f'Using {n_clusters} clusters...')

    color_map = color_clusters(q_pos, k_pos, args.q_cluster_size, args.q_cluster_size // 4)

    print('Plotting...')
    cluster_colors = [x for x in colors.cnames.keys()]
    random.shuffle(cluster_colors)
    cluster_colors.remove('white')
    cluster_colors = ['white'] + cluster_colors
    cmap = colors.ListedColormap(cluster_colors[:n_clusters])
    norm = colors.BoundaryNorm(np.arange(0, n_clusters + 1), cmap.N)


    fig, ax = plt.subplots()
    ax.set_title(f'Clustering memberships for a {args.map_size}x{args.map_size} part of a random image generated by a pre-trained BigGAN. \n Total number of clusters: {n_clusters}.')
    map_left_start = (color_map.shape[0] // 2) - (args.map_size // 2)
    map_left_end = (color_map.shape[0] // 2) + (args.map_size // 2)
    map_right_start = (color_map.shape[1] // 2) - (args.map_size // 2)
    map_right_end = (color_map.shape[1] // 2) + (args.map_size // 2)
    color_map = color_map[map_left_start:map_left_end, map_right_start:map_right_end]

    ax.imshow(color_map.cpu(), cmap=cmap, norm=norm)

    # draw gridlines
    ax.grid(which='major', axis='both', linestyle='-', color='k', linewidth=0.25)
    ax.set_xticks(np.arange(-.5, args.map_size, 1))
    ax.set_yticks(np.arange(-.5, args.map_size, 1))
    ax.set_ylabel('Queries')
    ax.set_xlabel('Keys')
    ax.set_yticklabels([])
    ax.set_xticklabels([])

    plt.show()
